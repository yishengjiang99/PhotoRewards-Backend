of APNS certificate signing:
1. generate an appOne.certificateSigningRequest. this gives you a private and a public key
2. upload the certificateSigningRequest to Apple, choose an app-specific bundle ID,
3. Download the aps_development.cer
4. Double click aps_development.cer to load this into your login keychain
5. select BOTH the aps_development.cer AND the private key and export it as Certificates.p12
6.  openssl pkcs12 -nocerts -out mvpDevKey.pem -in mvpCertificate.p12 
7. cp ~/Downloads/aps_development.cer stock_dev.cer
8. openssl x509 -in stock_dev.cer -inform der -out StockAlertDevCert.pem
9. cat StockAlertDevCert.pem StockAlertsDevKey.pem >StockAlertDevCertKey.pem
openssl s_client -connect gateway.sandbox.push.apple.com:2195 
    -cert PushChatCert.pem -key PushChatKey.pem
////////////////////////////////////////////////////////////////////////////////

$ctx = stream_context_create();
stream_context_set_option($ctx, 'ssl', 'local_cert', 'StockAlertDevCertKey.pem');
stream_context_set_option($ctx, 'ssl', 'passphrase', $passphrase);

// Open a connection to the APNS server
$fp = stream_socket_client(
        'ssl://gateway.sandbox.push.apple.com:2195', $err,
        $errstr, 60, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $ctx);

if (!$fp)
        exit("Failed to connect: $err $errstr" . PHP_EOL);

echo 'Connected to APNS' . PHP_EOL;

// Create the payload body
$body['aps'] = array(
        'alert' => $message,
        'sound' => 'default',
        'custom_key1'=>'hi',
        );

// Encode the payload as JSON
$payload = json_encode($body);

// Build the binary notification
$msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;

// Send it to the server
$result = fwrite($fp, $msg, strlen($msg));


